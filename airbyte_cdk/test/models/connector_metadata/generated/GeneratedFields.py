# generated by datamodel-codegen:
#   filename:  GeneratedFields.yaml

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Optional, Union

from pydantic.v1 import BaseModel, Extra, Field


class GitInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    commit_sha: Optional[str] = Field(
        None,
        description="The git commit sha of the last commit that modified this file.",
    )
    commit_timestamp: Optional[datetime] = Field(
        None,
        description="The git commit timestamp of the last commit that modified this file.",
    )
    commit_author: Optional[str] = Field(
        None,
        description="The git commit author of the last commit that modified this file.",
    )
    commit_author_email: Optional[str] = Field(
        None,
        description="The git commit author email of the last commit that modified this file.",
    )


class SourceFileInfo(BaseModel):
    metadata_etag: Optional[str] = None
    metadata_file_path: Optional[str] = None
    metadata_bucket_name: Optional[str] = None
    metadata_last_modified: Optional[str] = None
    registry_entry_generated_at: Optional[str] = None


class ConnectorMetrics(BaseModel):
    all: Optional[Any] = None
    cloud: Optional[Any] = None
    oss: Optional[Any] = None


class Usage(Enum):
    low = "low"
    medium = "medium"
    high = "high"


class SyncSuccessRate(Enum):
    low = "low"
    medium = "medium"
    high = "high"


class ConnectorMetric(BaseModel):
    class Config:
        extra = Extra.allow

    usage: Optional[Union[str, Usage]] = None
    sync_success_rate: Optional[Union[str, SyncSuccessRate]] = None
    connector_version: Optional[str] = None


class GeneratedFields(BaseModel):
    git: Optional[GitInfo] = None
    source_file_info: Optional[SourceFileInfo] = None
    metrics: Optional[ConnectorMetrics] = None
    sbomUrl: Optional[str] = Field(None, description="URL to the SBOM file")
