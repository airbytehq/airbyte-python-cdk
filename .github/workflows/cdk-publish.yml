name: Publish CDK and Source Declarative Manifest
on:
  push:
    branches:
      - main
    paths:
      - 'airbyte_cdk/pyproject.toml' # To only publish on CDK version change
      - 'Dockerfile'
  workflow_dispatch:

jobs:
  test:
    name: Test Source Declarative Manifest Docker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64 # Just build for the runner's architecture during test
          load: true
          tags: airbyte/source-declarative-manifest:build-test

      - name: Test image
        run: |
          docker run airbyte/source-declarative-manifest:build-test spec

      # - TODO: Add vulnerability scanning. The action is currently failing and is not worth blocking the build for now.
      # - name: Scan for vulnerabilities
      #   uses: aquasecurity/trivy-action@master
      #   continue-on-error: true # Prevent security scan from failing the build
      #   with:
      #     image-ref: airbyte/source-declarative-manifest:build-test
      #     format: 'sarif'
      #     output: 'trivy-results.sarif'
      #     exit-code: 1
      #     severity: 'CRITICAL,HIGH'
      #     timeout: '5m'

  publish:
    name: Publish SDM Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: ${{ success() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') }}
    permissions:
      id-token: write  # Required for trusted publishing
      contents: write  # Required for artifact uploads
    env:
      POETRY_NO_INTERACTION: 1
      POETRY_VIRTUALENVS_CREATE: false
      POETRY_VIRTUALENVS_IN_PROJECT: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Set up Python environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install poetry==1.6.1
          poetry config virtualenvs.create false

      - name: Get CDK version
        run: |
          export PATH="/home/runner/.local/bin:$PATH"
          source .venv/bin/activate
          pip install --upgrade pip
          pip install poetry==1.6.1

          # Get the current CDK version
          poetry self add "poetry-dynamic-versioning[plugin]"
          poetry dynamic-versioning
          cdk_version="$(poetry version --short | tr -d '[:space:]')"

          if [ -z "$cdk_version" ]; then
            echo "Failed to get CDK version"
            exit 1
          fi
          if [ "$cdk_version" = "0.0.0" ]; then
            echo "Error: Failed to resolve dynamic CDK version"
            exit 1
          fi

          echo "Original CDK version: $cdk_version"

          # Extract the valid SemVer part
          valid_cdk_version=$(echo "$cdk_version" | grep -Eo '^[0-9]+\.[0-9]+\.[0-9]+')

          if [ -z "$valid_cdk_version" ]; then
            echo "Failed to extract valid SemVer from $cdk_version"
            exit 1
          fi

          echo "Valid CDK version extracted: $valid_cdk_version"

          # Sanitize the version string for Docker tags
          sanitized_cdk_version="${valid_cdk_version}"

          echo "Using CDK version: $sanitized_cdk_version"
          echo "CDK_VERSION=$sanitized_cdk_version" >> $GITHUB_ENV

      - name: Check if tag already exists
        run: |
          tag="airbyte/source-declarative-manifest:${{ env.CDK_VERSION}}-${{ github.run_number }}"
          if DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect "$tag" > /dev/null 2>&1; then
            echo "The tag $tag already exists on Dockerhub. Skipping publish to prevent overwrite."
            exit 1
          fi
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            airbyte/source-declarative-manifest:test
            airbyte/source-declarative-manifest:test-${{ env.CDK_VERSION }}
            airbyte/source-declarative-manifest:test-${{ env.CDK_VERSION }}-${{ github.run_number }}
