[build-system]
build-backend = "poetry_dynamic_versioning.backend"
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]

[tool.airbyte_ci]
mount_docker_socket = true
optional_poetry_groups = ["dev"]
poe_tasks = ["check-ci"]
poetry_extras = ["file-based", "vector-db-based"]
python_versions = ["3.10", "3.11"]

[tool.check-wheel-contents]
# Quality control for Python wheel generation. Docs here:
# - https://github.com/jwodder/check-wheel-contents
ignore = [
  "W002" # Duplicate files. (TODO: Fix the few duplicate files, mostly `__init__.py` files that have only copyright text.)
]

[tool.isort]
skip = ["__init__.py"] # TODO: Remove after this is fixed: https://github.com/airbytehq/airbyte-python-cdk/issues/12

[tool.poe.tasks]
_format-check-prettier = {cmd = "npx prettier . --check", help = "Check formatting with prettier."}
# Format check tasks
_format-check-ruff = {cmd = "ruff format --check .", help = "Check formatting with Ruff."}
_format-fix-prettier = {cmd = "npx prettier . --write", help = "Format with prettier."}
# Format fix tasks
_format-fix-ruff = {cmd = "ruff format .", help = "Format with Ruff."}
# Linting/Typing check tasks
_lint-ruff = {cmd = "poetry run ruff check .", help = "Lint with Ruff."}
# Build tasks
assemble = {cmd = "bin/generate-component-manifest-dagger.sh", help = "Generate component manifest files."}
build = {help = "Run all tasks to build the package.", sequence = ["assemble", "build-package"]}
build-package = {cmd = "poetry build", help = "Build the python package: source and wheels archives."}
check-all = {help = "Lint, format, and type-check modified files.", ignore_fail = "return_non_zero", sequence = ["check-lockfile", "format-check", "lint", "type-check"]}
check-ci = {help = "Build the package, lint and run unit tests. Does not include type-checking.", sequence = ["build", "check-lockfile", "lint", "unit-test-with-cov"]}
# TODO: find a version of the modified mypy check that works both locally and in CI.
check-local = {help = "Lint all code, type-check modified files, and run unit tests.", sequence = ["check-lockfile", "lint", "type-check", "unit-test-with-cov"]}
# Lockfile check task
check-lockfile = {cmd = "poetry check", help = "Check the poetry lock file."}
# API Docs with PDoc
docs-generate = {cmd = "python -m docs.generate run", env = {PDOC_ALLOW_EXEC = "1"}, help = "Generate API documentation with PDoc."}
docs-preview = {help = "Generate API documentation with PDoc and then open the docs in the default web browser.", shell = "poe docs-generate && open docs/generated/index.html"}
fix-all = {help = "Lint-fix and format-fix modified files, ignoring unsafe fixes.", ignore_fail = "return_non_zero", sequence = ["format-fix", "lint-fix"]}
fix-and-check = {help = "Lint-fix and format-fix, then re-check to see if any issues remain.", ignore_fail = "return_non_zero", sequence = ["check-all", "fix-all"]}
format-check = {help = "Check formatting for all file types.", ignore_fail = "return_non_zero", sequence = ["_format-check-prettier", "_format-check-ruff"]}
format-fix = {help = "Format all file types.", ignore_fail = "return_non_zero", sequence = ["_format-fix-prettier", "_format-fix-ruff"]}
# Installation
install = {shell = "poetry install --all-extras"}
lint = {help = "Lint all code. Includes type checking.", ignore_fail = "return_non_zero", sequence = ["_lint-ruff", "type-check"]}
# Linting/Typing fix tasks
lint-fix = {cmd = "poetry run ruff check --fix .", help = "Auto-fix any lint issues that Ruff can automatically resolve (excluding 'unsafe' fixes)."}
lint-fix-unsafe = {cmd = "poetry run ruff check --fix --unsafe-fixes .", help = "Lint-fix modified files, including 'unsafe' fixes. It is recommended to first commit any pending changes and then always manually review any unsafe changes applied."}
# Build and check
pre-push = {help = "Run all build and check tasks.", sequence = ["build", "check-local"]}
pytest = {cmd = "poetry run coverage run -m pytest --durations=10", help = "Run all pytest tests."}
pytest-fast = {cmd = "poetry run coverage run -m pytest --durations=5 --exitfirst -m 'not flaky and not slow and not requires_creds'", help = "Run pytest tests, failing fast and excluding slow tests."}
type-check = {cmd = "poetry run mypy airbyte_cdk", help = "Type check modified files with mypy."}
unit-test-with-cov = {cmd = "pytest -s unit_tests --cov=airbyte_cdk --cov-report=term --cov-config ./pyproject.toml", help = "Run unit tests and create a coverage report."}

[tool.poetry]
authors = ["Airbyte <contact@airbyte.io>"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3.10",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Libraries :: Python Modules"
]
description = "A framework for writing Airbyte Connectors."
documentation = "https://docs.airbyte.io/"
homepage = "https://airbyte.com"
keywords = ["airbyte", "cdk", "connector-development-kit"]
license = "MIT"
name = "airbyte-cdk"
readme = "README.md"
repository = "https://github.com/airbytehq/airbyte-python-cdk"
# Python CDK uses dynamic versioning: https://github.com/mtkennerly/poetry-dynamic-versioning
version = "0.0.0" # Version will be calculated dynamically.

[tool.poetry.dependencies]
Jinja2 = "~3.1.2"
PyYAML = "^6.0.1"
Unidecode = "^1.3"
airbyte-protocol-models-dataclasses = "^0.14"
# Extras depedencies
avro = {optional = true, version = "~1.11.2"}
backoff = "*"
cachetools = "*"
cohere = {optional = true, version = "4.21"}
cryptography = ">=42.0.5,<44.0.0"
dpath = "^2.1.6"
dunamai = "^1.22.0"
fastavro = {optional = true, version = "~1.8.0"}
genson = "1.3.0"
isodate = "~0.6.1"
jsonref = "~0.2"
jsonschema = "~4.17.3" # 4.18 has some significant breaking changes: https://github.com/python-jsonschema/jsonschema/releases/tag/v4.18.0
langchain = {optional = true, version = "0.1.16"}
langchain_core = {optional = true, version = "0.1.42"}
markdown = {optional = true, version = "*"}
nltk = {optional = true, version = "3.9.1"}
# This will ensure that even when you run poetry install or pip install, the compatible version of numpy will always be chosen.
# airbyte-ci will try to install latest version when --use-local-cdk is used, resulting in the conflict.
numpy = "<2"
openai = {extras = ["embeddings"], optional = true, version = "0.27.9"}
orjson = "^3.10.7"
pandas = "2.2.2"
pdf2image = {optional = true, version = "1.16.3"}
"pdfminer.six" = {optional = true, version = "20221105"}
pendulum = "<3.0.0"
psutil = "6.1.0"
pyarrow = {optional = true, version = "~15.0.0"}
pydantic = "^2.7"
pyjwt = "^2.8.0"
pyrate-limiter = "~3.1.0"
pytesseract = {optional = true, version = "0.3.10"}
python = "^3.10,<3.13"
python-calamine = {optional = true, version = "0.2.3"}
python-dateutil = "*"
python-snappy = {optional = true, version = "0.7.3"}
python-ulid = "^3.0.0"
pytz = "2024.2"
rapidfuzz = "^3.10.1"
requests = "*"
requests_cache = "*"
serpyco-rs = "^1.10.2"
sqlalchemy = {optional = true, version = "^2.0,!=2.0.36"}
tiktoken = {optional = true, version = "0.8.0"}
unstructured = {extras = ["docx", "pptx"], optional = true, version = "0.10.27"}
"unstructured.pytesseract" = {optional = true, version = ">=0.3.12"}
wcmatch = "10.0"
xmltodict = ">=0.13,<0.15"

[tool.poetry.extras]
file-based = ["avro", "fastavro", "markdown", "pdf2image", "pdfminer.six", "pyarrow", "pytesseract", "python-calamine", "python-snappy", "unstructured", "unstructured.pytesseract"]
sql = ["sqlalchemy"]
vector-db-based = ["cohere", "langchain", "openai", "tiktoken"]

[tool.poetry.group.dev.dependencies]
asyncio = "3.4.3"
freezegun = "*"
mypy = "*"
pdoc = "^15.0.0"
poethepoet = "^0.24.2"
pympler = "*"
pyproject-flake8 = "^6.1.0"
pytest = "^7"
pytest-cov = "*"
pytest-httpserver = "*"
pytest-memray = "^1.6.0"
pytest-mock = "*"
requests-mock = "*"
ruff = "^0.7.2"
types-cachetools = "^5.5.0.20240820"
types-python-dateutil = "^2.9.0.20241003"
types-pyyaml = "^6.0.12.20240917"
# Stubs packages for mypy typing
types-requests = "^2.32.0.20241016"

[tool.poetry.scripts]
source-declarative-manifest = "airbyte_cdk.cli.source_declarative_manifest:run"

[tool.poetry-dynamic-versioning]
enable = true

[tool.pytest.ini_options]
filterwarnings = [
  "ignore::airbyte_cdk.sources.source.ExperimentalClassWarning"
]
log_cli = true
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_level = "INFO"

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = ["I"]
