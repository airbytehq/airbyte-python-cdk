[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "airbyte-cdk"
version = "6.5.2"
description = "A framework for writing Airbyte Connectors."
authors = ["Airbyte <contact@airbyte.io>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/airbytehq/airbyte"
repository = "https://github.com/airbytehq/airbyte"
documentation = "https://docs.airbyte.io/"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
]
keywords = ["airbyte", "connector-development-kit", "cdk"]


[tool.poetry.dependencies]
python = "^3.10"
airbyte-protocol-models-dataclasses = "^0.13"
backoff = "*"
cachetools = "*"
Deprecated = "~1.2"
dpath = "^2.1.6"
genson = "1.2.2"
isodate = "~0.6.1"
Jinja2 = "~3.1.2"
jsonref = "~0.2"
jsonschema = "~3.2.0"
pandas = "2.2.2"
pendulum = "<3.0.0"
psutil = "6.1.0"
pydantic = "^2.7"
pyrate-limiter = "~3.1.0"
python-dateutil = "*"
python-ulid = "^3.0.0"
PyYAML = "^6.0.1"
requests = "*"
requests_cache = "*"
wcmatch = "8.4"
# Extras depedencies
avro = { version = "~1.11.2", optional = true }
cohere = { version = "4.21", optional = true }
fastavro = { version = "~1.8.0", optional = true }
langchain = { version = "0.1.16", optional = true }
langchain_core = { version = "0.1.42", optional = true }
markdown = { version = "*", optional = true }
openai = { version = "0.27.9", extras = ["embeddings"], optional = true }
pdf2image = { version = "1.16.3", optional = true }
"pdfminer.six" = { version = "20221105", optional = true }
pyarrow = { version = "~15.0.0", optional = true }
pytesseract = { version = "0.3.10", optional = true }
python-calamine = { version = "0.2.3", optional = true }
python-snappy = { version = "0.7.3", optional = true }
Sphinx = { version = "~4.2", optional = true }
sphinx-rtd-theme = { version = "~1.0", optional = true }
tiktoken = { version = "0.4.0", optional = true }
nltk = { version = "3.8.1", optional = true }
# This will ensure that even when you run poetry install or pip install, the compatible version of numpy will always be chosen.
# airbyte-ci will try to install latest version when --use-local-cdk is used, resulting in the conflict.
numpy = "<2"
unstructured = { version = "0.10.27", extras = ["docx", "pptx"], optional = true }
"unstructured.pytesseract" = { version = ">=0.3.12", optional = true }
pyjwt = "^2.8.0"
cryptography = "^42.0.5"
pytz = "2024.1"
orjson = "^3.10.7"
serpyco-rs = "^1.10.2"
sqlalchemy = {version = "^2.0,!=2.0.36", optional = true }
xmltodict = "^0.13.0"

[tool.poetry.group.dev.dependencies]
freezegun = "*"
mypy = "*"
asyncio = "3.4.3"
ruff = "^0.7.2"
pdoc = "^15.0.0"
poethepoet = "^0.24.2"
pyproject-flake8 = "^6.1.0"
pytest = "^7"
pytest-memray = "^1.6.0"
pytest-cov = "*"
pytest-httpserver = "*"
pytest-mock = "*"
requests-mock = "*"

[tool.poetry.extras]
file-based = ["avro", "fastavro", "pyarrow", "unstructured", "pdf2image", "pdfminer.six", "unstructured.pytesseract", "pytesseract", "markdown", "python-calamine", "python-snappy"]
sphinx-docs = ["Sphinx", "sphinx-rtd-theme"]
vector-db-based = ["langchain", "openai", "cohere", "tiktoken"]
sql = ["sqlalchemy"]

[tool.isort]
skip = ["__init__.py"]  # TODO: Remove after this is fixed: https://github.com/airbytehq/airbyte-python-cdk/issues/12

[tool.ruff]
exclude = ["__init__.py"]  # TODO: Remove after this is fixed: https://github.com/airbytehq/airbyte-python-cdk/issues/12
include = ["airbyte_cdk/**/*.py"]  # Ignore test and script folders

target-version = "py310"
line-length = 100
preview = true

[tool.ruff.lint]
select = [
    # For rules reference, see https://docs.astral.sh/ruff/rules/
    "A",     # flake8-builtins
    "ANN",   # flake8-annotations
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "BLE",   # Blind except
    "C4",    # flake8-comprehensions
    "C90",   # mccabe (complexity)
    "COM",   # flake8-commas
    "CPY",   # missing copyright notice
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle (errors)
    "ERA",   # flake8-eradicate (commented out code)
    "EXE",   # flake8-executable
    "F",     # Pyflakes
    "FA",    # flake8-future-annotations
    "FBT",   # flake8-boolean-trap
    "FIX",   # flake8-fixme
    "FLY",   # flynt
    "FURB",  # Refurb
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "LOG",   # flake8-logging
    "N",     # pep8-naming
    "PD",    # pandas-vet
    "PERF",  # Perflint
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # Pylint
    "PT",    # flake8-pytest-style
    "PTH",   # flake8-use-pathlib
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RSE",   # flake8-raise
    "RUF",   # Ruff-specific rules
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "T10",   # debugger calls
    "TCH",    # flake8-type-checking
    "TD",     # flake8-todos
    "TID",    # flake8-tidy-imports
    "TRY",    # tryceratops
    "TRY002", # Disallow raising vanilla Exception. Create or use a custom exception instead.
    "UP",     # pyupgrade
    "W",      # pycodestyle (warnings)
    "YTT",    # flake8-2020
]
ignore = [
    # For rules reference, see https://docs.astral.sh/ruff/rules/

    # Consider re-enabling these when we have time to address them:
    "A003",    # Class attribute 'type' is shadowing a Python builtin
    "BLE001",  # Do not catch blind exception: Exception
    "C416",    # Allow unnecessary-comprehensions. Auto-fix sometimes unsafe if operating over a mapping.
    "DTZ005",  # Allow use of 'datetime.datetime.now()' without timezone (we should fix these eventually)
    "D",       # pydocstyle (Docstring conventions)
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "E501",    # Line too long
    "ERA001",  # Remove commented-out code
    "FIX002",  # Allow "TODO:" comments
    "PGH003",  # Allow non-specific "type: ignore" comments
    "PLW0108", # Lambda may be unnecessary; consider inlining inner function
    "PLW0603", # Using the global statement to update _cache is discouraged
    "T20",     # flake8-print, consider re-enabling once we have logging
    "TD003",   # Require issue links for TODOs

    # These we don't agree with or don't want to prioritize to enforce:
    "ANN003",  # kwargs missing type annotations
    "ANN101",  # Type annotations for 'self' args
    "ANN102",  # Type annotations for 'cls' args
    "ASYNC1",  # flake8-trio (opinionated, noisy)
    "COM812",  # Because it conflicts with ruff auto-format
    "DJ",      # Django linting
    "EM",      # flake8-errmsgs (may reconsider later)
    "FURB189", # Subclassing safety at the cost if isinstance() instability
    "G",       # flake8-logging-format
    "INP001",  # Dir 'examples' is part of an implicit namespace package. Add an __init__.py.
    "ISC001",  # Conflicts with ruff auto-format
    "N818",    # Custom exception names should use the suffix "Error"
    "NPY",     # NumPy-specific rules
    "N805",    # Enforce first-arg is 'self' (false positive for class methods in Pydantic)
    "PERF203", # exception handling in loop
    "PIE790",  # Allow unnecssary 'pass' (sometimes useful for readability)
    "PLR6201", # Allow membership checks in lists (set-based check is unsafe when values are unhashable)
    "PLR6301", # Allow class methods that don't use 'self' (otherwise noisy)
    "RET504",  # Ignore unnecessary assign before return
    "RUF022",  # Allow unsorted __all__ (sometimes useful for grouping by type with pdoc)
    "S",       # flake8-bandit (noisy, security related)
    "SIM910",  # Allow "None" as second argument to Dict.get(). "Explicit is better than implicit."
    "TD002",   # Require author for TODOs
    "TRY003",  # Allow string passing to exception constructor.
    "TRY400",  # Ignore for now: prefer logging.exception over logging.error
]
fixable = ["ALL"]
unfixable = [
    "ERA001", # Commented-out code (avoid silent loss of code)
    "T201",   # print() calls (avoid silent loss of code / log messages)
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pylint]
max-args = 8      # Relaxed from default of 5
max-branches = 15 # Relaxed from default of 12


[tool.ruff.lint.isort]
force-sort-within-sections = false
lines-after-imports = 2
known-first-party = [
    "airbyte_protocol",
    "airbyte_protocol_dataclasses",
]
known-local-folder = ["airbyte_cdk"]
required-imports = ["from __future__ import annotations"]
known-third-party = []
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.mccabe]
max-complexity = 24

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = false
ignore-fully-untyped = false

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
preview = false
docstring-code-format = true

[tool.poe.tasks]
# Build tasks
assemble = {cmd = "bin/generate-component-manifest-dagger.sh", help = "Generate component manifest files."}
build-package = {cmd = "poetry build", help = "Build the python package: source and wheels archives."}
build = {sequence = ["assemble", "build-package"], help = "Run all tasks to build the package."}

# Format check tasks
_format-check-ruff = {cmd = "ruff format --check .", help = "Check formatting with Ruff."}
_format-check-prettier = {cmd = "npx prettier . --check", help = "Check formatting with prettier."}
format-check = {sequence = ["_format-check-ruff", "_format-check-prettier"], help = "Check formatting for all file types.", ignore_fail = "return_non_zero"}

# Format fix tasks
_format-fix-ruff = {cmd = "ruff format .", help = "Format with Ruff."}
_format-fix-prettier = {cmd = "npx prettier . --write", help = "Format with prettier."}
format-fix = {sequence = ["_format-fix-ruff", "_format-fix-prettier"], help = "Format all file types.", ignore_fail = "return_non_zero"}

# Linting/Typing check tasks
_lint-ruff = {cmd = "poetry run ruff check .", help = "Lint with Ruff."}
type-check = {cmd = "bin/run-mypy-on-modified-files.sh", help = "Type check modified files with mypy."}
lint = {sequence = ["_lint-ruff", "type-check"], help = "Lint all code. Includes type checking.", ignore_fail = "return_non_zero"}

# Lockfile check task
check-lockfile = {cmd = "poetry check", help = "Check the poetry lock file."}

# Linting/Typing fix tasks
lint-fix = { cmd = "poetry run ruff check --fix ." }
lint-fix-unsafe = { cmd = "poetry run ruff check --fix --unsafe-fixes .", help = "Lint-fix modified files, including 'unsafe' fixes. It is recommended to first commit any pending changes and then always manually review any unsafe changes applied." }

# Combined Check and Fix tasks

check-all = {sequence = ["lint", "format-check", "type-check", "check-lockfile"], help = "Lint, format, and type-check modified files.", ignore_fail = "return_non_zero"}
fix-all = {sequence = ["format-fix", "lint-fix"], help = "Lint-fix and format-fix modified files, ignoring unsafe fixes.", ignore_fail = "return_non_zero"}
fix-and-check = {sequence = ["fix-all", "check-all"], help = "Lint-fix and format-fix, then re-check to see if any issues remain.", ignore_fail = "return_non_zero"}

# PyTest tasks

pytest = {cmd = "poetry run coverage run -m pytest --durations=10", help = "Run all pytest tests."}
pytest-fast = {cmd = "poetry run coverage run -m pytest --durations=5 --exitfirst -m 'not flaky and not slow and not requires_creds'", help = "Run pytest tests, failing fast and excluding slow tests."}
unit-test-with-cov = {cmd = "pytest -s unit_tests --cov=airbyte_cdk --cov-report=term --cov-config ./pyproject.toml", help = "Run unit tests and create a coverage report."}

# Combined check tasks (other)

# TODO: find a version of the modified mypy check that works both locally and in CI.
check-local = {sequence = ["lint", "type-check", "check-lockfile", "unit-test-with-cov"], help = "Lint all code, type-check modified files, and run unit tests."}
check-ci = {sequence = ["check-lockfile", "build", "lint", "unit-test-with-cov"], help = "Build the package, lint and run unit tests. Does not include type-checking."}

# Build and check
pre-push = {sequence = ["build", "check-local"], help = "Run all build and check tasks."}

# API Docs with PDoc
docs-generate = {env = {PDOC_ALLOW_EXEC = "1"}, cmd = "python -m docs.generate run"}
docs-preview = {shell = "poe docs-generate && open docs/generated/index.html"}

[tool.check-wheel-contents]
# Quality control for Python wheel generation. Docs here:
# - https://github.com/jwodder/check-wheel-contents
ignore = [
  "W002"  # Duplicate files. (TODO: Fix the few duplicate files, mostly `__init__.py` files that have only copyright text.)
]

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
filterwarnings = [
    "ignore::airbyte_cdk.sources.source.ExperimentalClassWarning"
]

[tool.airbyte_ci]
python_versions = ["3.10", "3.11"]
optional_poetry_groups = ["dev"]
poetry_extras = ["file-based", "sphinx-docs", "vector-db-based"]
poe_tasks = ["check-ci"]
mount_docker_socket = true
